// <auto-generated />
using System;
using Infrastructure.DAL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Infrastructure.DAL.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250803185602_ExtendVehiclesAndEnergyEntry")]
    partial class ExtendVehiclesAndEnergyEntry
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Domain.Entities.EnergyEntries.EnergyEntry", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<decimal>("Cost")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("cost");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date")
                        .HasColumnName("date");

                    b.Property<int>("Mileage")
                        .HasColumnType("integer")
                        .HasColumnName("mileage");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_date");

                    b.Property<Guid>("VehicleId")
                        .HasColumnType("uuid")
                        .HasColumnName("vehicle_id");

                    b.HasKey("Id");

                    b.HasIndex("VehicleId")
                        .HasDatabaseName("ix_energy_entry_vehicle_id");

                    b.ToTable("energy_entry", (string)null);

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("Domain.Entities.Users.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("first_name");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("last_name");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("password_hash");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_date");

                    b.HasKey("Id")
                        .HasName("pk_users");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasDatabaseName("ix_users_email");

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Vehicles.Vehicle", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Brand")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("brand");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date");

                    b.Property<int?>("ManufacturedYear")
                        .HasColumnType("integer")
                        .HasColumnName("manufactured_year");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("model");

                    b.Property<int>("EngineType")
                        .HasColumnType("integer")
                        .HasColumnName("power_type");

                    b.Property<int?>("Type")
                        .HasColumnType("integer")
                        .HasColumnName("type");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_date");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<string>("VIN")
                        .HasMaxLength(17)
                        .HasColumnType("character varying(17)")
                        .HasColumnName("vin");

                    b.HasKey("Id")
                        .HasName("pk_vehicles");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_vehicles_user_id");

                    b.ToTable("vehicles", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.EnergyEntries.ChargingEntry", b =>
                {
                    b.HasBaseType("Domain.Entities.EnergyEntries.EnergyEntry");

                    b.Property<int?>("ChargingDurationMinutes")
                        .HasColumnType("integer")
                        .HasColumnName("charging_duration_minutes");

                    b.Property<decimal>("EnergyAmount")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("energy_amount");

                    b.Property<decimal>("PricePerUnit")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("price_per_unit");

                    b.Property<int>("Unit")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1)
                        .HasColumnName("unit");

                    b.ToTable("charging_entries", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.EnergyEntries.FuelEntry", b =>
                {
                    b.HasBaseType("Domain.Entities.EnergyEntries.EnergyEntry");

                    b.Property<decimal>("PricePerUnit")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("price_per_unit");

                    b.Property<int>("Unit")
                        .HasColumnType("integer")
                        .HasColumnName("unit");

                    b.Property<decimal>("Volume")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("volume");

                    b.ToTable("fuel_entries", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.EnergyEntries.EnergyEntry", b =>
                {
                    b.HasOne("Domain.Entities.Vehicles.Vehicle", "Vehicle")
                        .WithMany("EnergyEntries")
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_energy_entry_vehicles_vehicle_id");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("Domain.Entities.Vehicles.Vehicle", b =>
                {
                    b.HasOne("Domain.Entities.Users.User", "User")
                        .WithMany("Vehicles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_vehicles_users_user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.EnergyEntries.ChargingEntry", b =>
                {
                    b.HasOne("Domain.Entities.EnergyEntries.EnergyEntry", null)
                        .WithOne()
                        .HasForeignKey("Domain.Entities.EnergyEntries.ChargingEntry", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_charging_entries_energy_entry_id");
                });

            modelBuilder.Entity("Domain.Entities.EnergyEntries.FuelEntry", b =>
                {
                    b.HasOne("Domain.Entities.EnergyEntries.EnergyEntry", null)
                        .WithOne()
                        .HasForeignKey("Domain.Entities.EnergyEntries.FuelEntry", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_fuel_entries_energy_entry_id");
                });

            modelBuilder.Entity("Domain.Entities.Users.User", b =>
                {
                    b.Navigation("Vehicles");
                });

            modelBuilder.Entity("Domain.Entities.Vehicles.Vehicle", b =>
                {
                    b.Navigation("EnergyEntries");
                });
#pragma warning restore 612, 618
        }
    }
}
